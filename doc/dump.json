[
  {
    "__docId__": 0,
    "kind": "file",
    "static": true,
    "variation": null,
    "name": "src/index.js",
    "memberof": null,
    "longname": "src/index.js",
    "access": null,
    "description": null,
    "lineNumber": 1,
    "content": "'use strict'\n\n/**\n * Module dependencies.\n *\n * @private\n */\n\nimport { combineReducers, createStore } from 'redux'\nimport { Parser, Template } from 'starplate'\nimport esprima from 'esprima'\nimport extend from 'extend'\nimport domify from 'domify'\n\n/**\n * Container symbols.\n *\n * @private\n */\n\nconst $domElement = Symbol('Element')\nconst $middleware = Symbol('middleware')\nconst $children = Symbol('children')\nconst $pipes = Symbol('pipes')\nconst $model = Symbol('model')\nconst $store = Symbol('store')\nconst $uid = Symbol('uid')\n\n/**\n * Private stardux data attached to\n * traversed DOM elements.\n *\n * @private\n * @const\n * @type {String}\n */\n\nconst STARDUX_PRIVATE_ATTR = '__starduxData'\n\n/**\n * Reducer action type symbols.\n *\n * @private\n * @const\n * @type {Symbol)\n */\n\nconst $UPDATE_ACTION = Symbol('UPDATE')\n\n/**\n * Known container map by ID\n *\n * @private\n * @type {Map}\n */\n\nconst CONTAINERS = new Map()\n\n/**\n * Clones an object.\n *\n * @private\n * @param {Object} object\n * @return {Object}\n */\n\nfunction clone (object) {\n  return extend(true, {}, object)\n}\n\n/**\n * Detects if input is \"like\" an array.\n *\n * @private\n * @param {Mixed} a\n * @return {Boolean}\n */\n\nfunction isArrayLike (a) {\n  if ('object' != typeof a)\n    return false\n  else if (null == a)\n    return false\n  else\n    return Boolean( Array.isArray(a)\n                    || null != a.length\n                    || a[0] )\n}\n\n/**\n * Make stardux data object on a\n * node if not already there.\n *\n * @private\n * @param {Object} node\n * @param {Object} [data = {}]\n * @return {Object}\n */\n\nfunction mkdux (node, data = {}) {\n  if (node instanceof Container)\n    node = node.domElement\n  node[STARDUX_PRIVATE_ATTR] = ( node[STARDUX_PRIVATE_ATTR] || data )\n  return node[STARDUX_PRIVATE_ATTR]\n}\n\n/**\n * Remove stardux data object.\n *\n * @private\n * @param {Object} node\n */\n\nfunction rmdux (node) {\n  if (null == node) return\n  if (node instanceof Container)\n    node = node.domElement\n  delete node[STARDUX_PRIVATE_ATTR]\n}\n\n/**\n * Returns an array of known tokens\n * in a javascript string.\n *\n * @private\n * @param {String} string\n * @return {Array}\n */\n\nfunction getTokens (string) {\n  let tokens = null\n  try { tokens = esprima.tokenize('`'+ string +'`') }\n  catch (e) { tokens = [] }\n  return tokens\n}\n\n/**\n * Returns an object of identifiers with\n * empty string or NO-OP function\n * values.\n *\n * @private\n * @param {Array} tokens\n * @return {Object}\n */\n\nfunction getIdentifiersFromTokens (tokens) {\n  const identifiers = {}\n\n  /**\n   * Predicate to determine if token is an identifier.\n   *\n   * @private\n   * @param {Object} token\n   * @return {Boolean}\n   */\n\n  const isIdentifier = token => 'Identifier' == token.type\n\n  /**\n   * Mark token as a function identifier.\n   *\n   * @private\n   * @param {Object} token\n   * @param {Number} index\n   * @return {Object} token\n   */\n\n  const markFunction = (token, index) => {\n    const next = tokens[index + 1] || null\n    token.isFunction = ( 'Identifier' == token.type\n                        && 'object' == typeof next && next\n                        && 'Punctuator' == next.type\n                        && '(' == next.value\n                          ? true : false )\n    return token\n  }\n\n  /**\n   * Mark token as a object identifier.\n   *\n   * @private\n   * @param {Object} token\n   * @param {Number} index\n   * @return {Object} token\n   */\n\n  const markObject = (token, index) => {\n    const next = tokens[index + 1] || null\n    token.isObject = ( 'Identifier' == token.type\n                      && 'object' == typeof next && next\n                      && 'Punctuator' == next.type\n                      && '.' == next.value\n                        ? true : false )\n    return token\n  }\n\n  /**\n   * Assign token value to identifierss map.\n   *\n   * @private\n   * @param {Object} map\n   * @param {Object} token\n   * @return {Object} map\n   */\n\n  const assign = (map, token) => {\n    const value = token.value\n    if (token.isFunction)\n      map[value] = _ => ''\n    else if (token.isObject)\n      map[value] = {}\n    else\n      map[value] = ''\n    return map\n  }\n\n  // resolve identifierss and return map\n  return ( tokens\n          .map((t, i) => markFunction(t, i))\n          .map((t, i) => markObject(t, i))\n          .filter(t => isIdentifier(t))\n          .reduce((map, t) => assign(map, t), identifiers) )\n}\n\n/**\n * Ensures a DOM string from a given input.\n *\n * @private\n * @param {String} html\n * @return {String}\n */\n\nfunction ensureDOMString (html = '') {\n  html = 'string' == typeof html ? html : String(html || '')\n  return html.trim()\n}\n\n/**\n * Ensure DOM element.\n *\n * @private\n * @param {Mixed} input\n * @return {Element}\n */\n\nfunction ensureDOMElement (input) {\n  let domElement = null\n  let tmp = null\n  if (input instanceof Element) {\n    return input\n  } else if ('string' == typeof input) {\n    tmp = document.createElement('div')\n    tmp.innerHTML = input\n    domElement = tmp.innerHTML.length ? tmp.children[0] : new Template(input)\n  } else {\n    domElement = document.createElement('div')\n  }\n  return domElement\n}\n\n/**\n * Returns a template tring from a given\n * DOM Element. If the DOM Element given is a\n * string then it is simply returned.\n *\n * @public\n * @param {Element|String} domElement\n * @return {String}\n */\n\nfunction getTemplateFromDomElement (domElement) {\n  let data = {}\n  let src = null\n\n  if (domElement && domElement[STARDUX_PRIVATE_ATTR])\n    data = mkdux(domElement)\n\n  if ('string' == typeof domElement)\n    src = domElement\n  else if (data.src)\n    src = data.src\n  else if (domElement.children && 0 == domElement.children.length)\n    src = ensureDOMString(domElement.textContent)\n  else if (domElement.firstChild instanceof Text)\n    src = ensureDOMString(domElement.innerHTML)\n  else if (domElement instanceof Text)\n    src = ensureDOMString(domElement.textContent)\n  else if (domElement)\n    src = domElement.innerHTML || domElement.textContent\n\n  return src\n}\n\n/**\n * Ensures container state identifiers (tokens) derived from\n * the DOM element source are defined on the state if not\n * already. This is useful to prevent reference errors from\n * being thrown when ES6 templates are evaulated in starplate's\n * VM.\n *\n * @private\n * @param {Container} container\n * @return {Object} identifiers\n */\n\nfunction ensureContainerStateIdentifiers (container) {\n  const domElement = container[$domElement]\n  const template = getTemplateFromDomElement(domElement)\n  const tokens = getTokens(template)\n  const identifiers = getIdentifiersFromTokens(tokens)\n  const update = {}\n  const state = container.state\n  if (identifiers) {\n    for (let key in identifiers) {\n      if (undefined === state[key])\n        update[key] = identifiers[key]\n    }\n\n    container.define(update)\n  }\n  return identifiers || null\n}\n\n/**\n * Creates a root reducer for a Container\n * instance.\n *\n * @private\n * @param {Container} container\n * @return {Function}\n */\n\nfunction createRootReducer (container) {\n  return (state = {}, action = {data: {}}) => {\n    const identifiers = ensureContainerStateIdentifiers(container)\n    const domElement = container[$domElement]\n    const template = getTemplateFromDomElement(domElement)\n    const middleware = container[$middleware].entries()\n    const isBody = domElement == document.body\n\n    action.data = action.data || {}\n\n    /**\n     * Loops over each middleware function\n     * providing state and action values\n     * given to use from redux.\n     *\n     * @private\n     */\n\n    void function next () {\n      const step = middleware.next()\n      const done = step.done\n      const reducer = step.value ? step.value[0] : null\n      if (done) return\n      else if (null == reducer) next()\n      else if (false === reducer(state, action)) return\n      else next()\n    }()\n\n    switch (action.type) {\n      case $UPDATE_ACTION:\n        container.define(action.data)\n        if (!isBody && identifiers) {\n          const parser = new Parser()\n          const partial = new Template(template)\n          const src = partial.render(container.state, container)\n          const patch = parser.createPatch(src)\n          patch(domElement)\n      }\n      break\n    }\n\n    return extend(true, container.state, state, action.data)\n  }\n}\n\n/**\n * Creates a pipe reducer for a Container\n * instance.\n *\n * @private\n * @param {Container} container\n * @return {Function}\n */\n\nfunction createPipeReducer (container) {\n  return (_, action = {data: {}}) => {\n    const state = container.state\n    const pipes = container[$pipes].entries()\n    reduce()\n    return container.state\n\n    /**\n     * Loops over each pipe function\n     * providing state and action values\n     * given to use from redux.\n     *\n     * @private\n     */\n\n    function reduce () {\n      const step = pipes.next()\n      const done = step.done\n      const pipe = step.value ? step.value[1] : null\n      if (done) return\n      else if (false === pipe(state, action)) return\n      else return reduce()\n    }\n  }\n}\n\n/**\n * The action type dispatched by the update() method.\n *\n * @example <caption>Handle update actions in middleware and reducers.</caption>\n *\n *   // Use this value to determine what type of\n *   // action was dispatched in a reducer or\n *   // middleware function\n *   (state, action) => {\n *     if (UPDATE == action.type) {\n *        // reducer/middleware logic here\n *     }\n *   }\n *\n * @public\n * @const\n * @type {Symbol}\n */\n\nexport const UPDATE = $UPDATE_ACTION\n\n/**\n * Create a new Container instance with optional\n * initial state and n reducers.\n *\n * @example <caption>Create an anonymouse container.</caption>\n *   const container = createContainer();\n *\n * @example <caption>Create a container for a DOM Element.</caption>\n *   const container = createContainer(domElement);\n *\n * @example <caption>Create a container for a DOM Element with initial state.</caption>\n *   const container = createContainer(domElement, {value: 0});\n *\n * @example <caption>Create a container for a DOM Element with initial state and reducers.</caption>\n *   const container = createContainer(domElement, {value: 0}, (state = {}, action) => {\n *     if (UPATE == action.type) {\n *        return {\n *          value: state.action + action.data.value\n *        }\n *     }\n *   });\n *\n * @public\n * @param {Element} domElement\n * @param {?(Object)} [initialState] - Initial state object\n * @param {...Function} [reducers]\n * @return {Container}\n */\n\nexport function createContainer (domElement, initialState = null, ...reducers) {\n  const container = ( fetchContainer(domElement)\n                   || new Container(domElement, ...reducers) )\n  return container.update(initialState)\n}\n\n/**\n * Creates a or returns a new Container instance\n * from a given DOM element.\n *\n * If a DOM element is already associated with\n * a container then the container is just\n * returned, otherwise a new one is created.\n *\n * @example <caption>Make a container for a DOM Element.</caption>\n *   const container = makeContainer(document.body);\n *\n * @public\n * @param {Element} domElement\n * @return {Container}\n */\n\nexport function makeContainer (domElement) {\n  let container = null\n  if (false == (domElement instanceof Element))\n    throw new TypeError(\"makeContainer() expects a DOM element.\")\n  container = fetchContainer(domElement) || new Container(domElement)\n  return container\n}\n\n/**\n * Create or restore a Container instance\n * from a JSON object with an optional state\n * object a reducers.\n *\n * Containers are created if they do not already\n * exist internally.\n *\n * @example <caption>Restore or create a container from JSON.</caption>\n *   const container = restoreContainerFromJSON(json);\n *\n * @example <caption>Restore or create a container from JSON with initial state.</caption>\n *   const container = restoreContainerFromJSON(json, {value: 0});\n *\n * @example <caption>Restore or create a container from JSON with initial state and reducers.</caption>\n *   const container = restoreContainerFromJSON(json, {value: 0}, ...reducers);\n *\n * @public\n * @param {Object} json\n * @param {?(Object)} [initialState] - Initial state object\n * @param {...Function} [reducers]\n * @return {Container}\n */\n\nexport function restoreContainerFromJSON (json, initialState = null, ...reducers) {\n  const id = json.id\n  const src = json.src\n  let data = null\n  let children = []\n  let container = fetchContainer(id)\n  let domElement = null\n\n  if (null == container)\n    container = new Container(null, ...reducers)\n\n  container[$uid] = id\n  domElement = container.domElement\n  data = mkdux(domElement)\n\n  saveContainer(container)\n\n  if (src != data.src)\n    data.src = src\n\n  if (initialState)\n    container.update(initialState)\n\n  for (let child of json.children)\n    children.push(restoreContainerFromJSON(child, initialState))\n\n  realignContainerTree(container, true, true)\n\n  for (let child of children)\n    if (false == container.contains(child))\n      container.appendChild(child, false)\n\n  return container.update()\n}\n\n/**\n * Compose a container from containers or DOM elements.\n * If a Container or Element is given as first argument then\n * it is treated as the root and all subsequent arguments are\n * treated as direct descendants of the root. If the second\n * argument is an array or an \"array like\" object then it is\n * treated as direct descendants of the root and all subsequent\n * arguments are ignored. If an array or \"array like\" object is\n * passed as the first argument a new root container is created\n * and the first argument is treated as direct descendants of\n * the newly created root container. The root container, newly\n * created or restored is returned.\n *\n * @example <caption>Compose containers together with new root.</caption>\n *   const a = createContainer();\n *   const b = createContainer();\n *   const composed = composeContainers([a, b]);\n *\n * @example <caption>Compose containers together with given root.</caption>\n *   const a = createContainer();\n *   const b = createContainer();\n *   const c = createContainer();\n *   const composed = composeContainers(a, [b, c]);\n *\n * @public\n * @param {?(Element|Container)} root\n * @param {?(...Element|Container|String)} containers\n * @return {Container}\n */\n\nexport function composeContainers (root, ...containers) {\n  let composed = null\n  let updateChildren = false\n  const children = []\n\n  // array of containers\n  if (isArrayLike(root)) {\n    containers = [ ...root ].map(createContainer)\n    root = null\n  } else {\n    // derive containers from arguments\n    if (isArrayLike(containers[0]))\n      containers = [ ...containers[0] ]\n    containers = [ ...containers ].map(createContainer)\n  }\n\n  composed = createContainer(root || undefined)\n\n  // create composite\n  let composite = composed\n  for (let child of containers) {\n    if (false == composite.contains(child))\n      composite = composite.pipe(child)\n  }\n\n  // realign root tree\n  realignContainerTree(composed, true)\n\n  // allow consumer to unwind composition\n  composed.decompose = _ => {\n    let composite = composed\n    for (let child of containers)\n      composite = composite.unpipe(child)\n    // remove this function\n    delete composed.decompose\n    return composed\n  }\n\n  return composed\n}\n\n/**\n * Returns immutable private stardux data for a given\n * input. Input can be a container, an Element,\n * or a string representing a container ID. If data is\n * not found then null is returned.\n *\n * @example <caption>Get container data for a container.</caption>\n *   const data = getContainerData(container);\n *\n * @example <caption>Get container data for a container from a given DOM element.</caption>\n *   const data = getContainerData(container);\n *\n * @example <caption>Get container data for a container from a given id.</caption>\n *   const data = getContainerData(id);\n *\n * @public\n * @param {Container|Element|String} arg\n * @return {Object}\n */\n\nexport function getContainerData (arg) {\n  let data = null\n  let domElement = null\n  const container = fetchContainer(arg);\n\n  if (null == container) {\n    throw new TypeError( \"Unexpected input for getContainerData. \"\n                       + \"Expecting an instance of a Container or Element, \"\n                       + \"or a string.\" )\n  }\n\n  if (domElement)\n    data = domElement[STARDUX_PRIVATE_ATTR]\n  return data ? Object.freeze(data) : null\n}\n\n/**\n * Restores orphaned children containers\n * still attached to a container. An orphan\n * container is a container who belongs to\n * a set of containers and it's DOM element\n * is not attched to a DOM tree (The parent\n * container's DOM element).\n *\n * @public\n * @param {Container|Element} container\n * @param {Boolean} [recursive]\n */\n\nexport function restoreOrphanedTree (container, recursive = false) {\n  if (container instanceof Element)\n    container = fetchContainer(container)\n\n  if (null == container)\n    return\n\n  const domElement = container.domElement\n  const children = container[$children]\n\n  for (let child of [ ...children ]) {\n    const childDomElement = child.domElement\n\n    if (false == domElement.contains(childDomElement))\n      domElement.appendChild(childDomElement)\n\n    if (recursive)\n      restoreOrphanedTree(child, true)\n  }\n}\n\n/**\n * Realign container DOM tree by removing containers\n * not found in container DOM tree. If recursive is set to\n * true then realignment is applied to all subsequent child\n * containers. If forceOrphanRestoration is set to true then\n * orphan containers are restored.\n *\n * @public\n * @param {Container} container\n * @param {Boolean} [recursive]\n * @param {Boolean} [forceOrphanRestoration]\n */\n\nexport function realignContainerTree (container,\n                                      recursive = false,\n                                      forceOrphanRestoration = false) {\n  const domElement = container.domElement\n  const children = container[$children]\n\n  if (null == domElement.children)\n    return\n\n  const delta = [ ...children ].length - domElement.children.length\n\n  if (delta > 0 || true === forceOrphanRestoration)\n    restoreOrphanedTree(container, recursive)\n\n  // purge child containers existing in tree where\n  // the DOM element is not a child of the container\n  // DOM element.\n  for (let child of [ ...children ]) {\n    const childElement = child.domElement\n    if (false == domElement.contains(childElement))\n      children.delete(child)\n  }\n\n  // traverse children\n  for (let childElement of [ ...domElement.children ]) {\n    const data = childElement[STARDUX_PRIVATE_ATTR]\n    const child = 'object' == typeof data ? fetchContainer(data.id) : null\n\n    // skip DOM elements which are not claimed\n    // by any existing containers\n    if (null == child)\n      continue\n\n    children.add(child)\n\n    // recurse child containers\n    if (true === recursive)\n      realignContainerTree(child, true, forceOrphanRestoration)\n  }\n}\n\n\n/**\n * Save a container to the known containers map. A\n * DOM element may be passed if it has been claimed by\n * a Container instance.\n *\n * @example <caption>Save a container</caption>\n *   saveContainer(container);\n *\n * @example <caption>Save a container by DOM element</caption>\n *   saveContainer(domElement);\n *\n * @public\n * @param {(Container|Element)} container\n * @return {Boolean}\n */\n\nexport function saveContainer (container) {\n  container = fetchContainer(container) || container\n  if (container && container.id && !CONTAINERS.has(container.id)) {\n    CONTAINERS.set(container.id, container)\n    return true\n  }\n  return false\n}\n\n/**\n * Fetch a saved container by container ID,\n * DOM element, or by a container instance.\n *\n * @example <caption>Fetch container by id.</caption>\n *   const container = fetchContainer(id);\n *\n * @example <caption>Fetch container by DOM element.</caption>\n *   const container = fetchContainer(domElement);\n *\n * @example <caption>Fetch container by object with id.</caption>\n *   const container = fetchContainer({id: id});\n *\n * @public\n * @param {(String|Element|Object)} arg\n * @param {String} [arg.id] - Container ID\n * @return {class Container}\n */\n\nexport function fetchContainer (arg) {\n  const id = ( arg && arg.id )\n             ? arg.id\n             : ( arg && arg[STARDUX_PRIVATE_ATTR] )\n               ? arg[STARDUX_PRIVATE_ATTR].id\n               : arg\n  return id ? CONTAINERS.get(id) : null\n}\n\n/**\n * Generates a unique hex ID for Container instances.\n *\n * @example <caption>Create a unique container ID</caption>\n *   const id = createContainerUid();\n *\n * @public\n * @return {String}\n */\n\nexport function createContainerUid () {\n  return ( Math.random() ).toString('16').slice(1)\n}\n\n/**\n * Returns an interator for all containers.\n *\n * @example <caption>Get an iterator for all containers.</caption>\n *   const it = getAllContainers();\n *   for (let pair of [ ...it ])\n *     console.log(pair);\n *\n * @public\n * @return {Array<MapIterator>}\n */\n\nexport function getAllContainers () {\n  return CONTAINERS.entries()\n}\n\n/**\n * Execute a function for each container.\n *\n * @example\n *   forEachContainer(container => {\n *     console.log(container);\n *   });\n *\n * @public\n * @param {Function} fn\n * @param {Object} [scope]\n */\n\nexport function forEachContainer (fn, scope = null) {\n  const containers = getAllContainers()\n  fn = 'function' == typeof fn ? fn : _ => void 0\n  for (let kv of containers)\n    fn.call(scope || global, kv[1], containers)\n}\n\n/**\n * Traverse a container's tree recursively.\n *\n * @example\n *   traverseContainer(container, child => {\n *     console.log(child);\n *   });\n *\n * @public\n * @param {Container} container\n * @param {Function} fn\n * @param {Object} [scope]\n */\n\nexport function traverseContainer (container, fn, scope) {\n  const children = container.children\n  for (let child of [ ...children ]) {\n    fn.call(scope || global, child, children)\n    traverseContainer(child, fn, scope)\n  }\n}\n\n/**\n * Removes a container from the internal tree.\n * The container is also removed from its parent\n * if it is attched to one. A string ID, DOM element,\n * or Container may be used as an argument.\n *\n * @example <caption>Remove container by id.</caption>\n *   removeContainer(id);\n *\n * @example <caption>Remove container by DOM element.</caption>\n *   removeContainer(domElement);\n *\n * @example <caption>Remove container by object with id.</caption>\n *   removeContainer({id: id});\n *\n * @public\n * @param {(String|Container|Element)} arg\n * @return {Boolean}\n */\n\nexport function removeContainer  (arg) {\n  const container = fetchContainer(arg)\n  const id = container ? container.id : null\n  if (id && CONTAINERS.has(id)) {\n    // remove from parent\n    if (container.parent)\n      container.parent.removeChild(container, false, true)\n\n    // remove stardux data\n    rmdux(container.domElement);\n\n    // remove from tree\n    CONTAINERS.delete(id)\n    return true\n  }\n  return false\n}\n\n/**\n * Replace a container with another. Arguments may be\n * a container ID, Container instance, or DOM elements\n * claimed by a Container instance. If create is set to true\n * then the replacement container is created if it does not\n * already exist. The function will throw an Error if the\n * existing input container does not exist or is not a Container.\n *\n * @example <caption>Replace container by container.</caption>\n *   replaceContainer(existingContainer, replaceContainer);\n *\n * @example <caption>Replace container by ids.</caption>\n *   replaceContainer(existingId, replacementId);\n *\n * @example <caption>Replace container by DOM elements.</caption>\n *   replaceContainer(existingDomElement, replacementDomElement);\n *\n * @example <caption>Replace container by object with id.</caption>\n *   replaceContainer({id: existingId}, {id: replacementId});\n *\n * @public\n * @param {(String|Container|Element)} existing\n * @param {(String|Container|Element)} replacement\n * @param {Boolen} [create]\n * @return {Container}\n */\n\nexport function replaceContainer (existing, replacement, create = false) {\n  let replacementContainer = null\n  let existingContainer = null\n\n  // get existing container, if the container\n  // does not exist then throw an error\n  existingContainer = fetchContainer(existing)\n  if (null == existingContainer) {\n    throw Error( \"replaceContainer() called for an existing  container \"\n               + \"that does not exist.\" )\n  }\n\n  // get replacement container if input is not\n  // a container already like an ID or DOM element.\n  if (false == (replacement instanceof Container))\n    replacementContainer = fetchContainer(replacement)\n  else\n    replacementContainer = replacement\n\n  // if the a replacement didn't exist and\n  // create was set to true then create the\n  // replacement from the replacement input\n  if (null == replacementContainer && true === create)\n    replacementContainer = createContainer(replacement)\n\n  // replace existing container with the replacement container\n  // by replacing its internal DOM element and updating the\n  // internal container map\n  if (existingContainer instanceof Container &&\n      replacementContainer instanceof Container) {\n    removeContainer(existingContainer)\n    replaceDOMElement(existingContainer, replacementContainer.domElement)\n    saveContainer(replacementContainer)\n  }\n\n  return replacementContainer || null\n}\n\n/**\n * Clears all saved containers. This will call\n * removeContainer for every saved container.\n *\n * @public\n * @return {undefined}\n */\n\nexport function clearContainers () {\n  // remove stardux data for each container\n  forEachContainer(container => removeContainer(container))\n\n  // sanity clear containers\n  CONTAINERS.clear()\n}\n\n/**\n * Replace container element with another. This will remove all\n * children containers and realign the container tree.\n *\n * @public\n * @param {Container} container\n * @param {Element} domElement\n * @return {Container}\n */\n\nexport function replaceDOMElement (container, domElement) {\n  const existingData = mkdux(domElement)\n  const data = mkdux(container.domElement)\n  if (domElement) {\n    mkdux(domElement, data)\n\n    const sources = []\n    const childElements = [ ...domElement.children ]\n    const existingContainer = fetchContainer(existingData.id)\n\n    container[$uid] = existingData.id || data.id || container[$uid]\n    container[$domElement] = domElement\n\n    container[$children].clear()\n\n    for (let childElement of childElements)\n      storeChildSource(childElement)\n\n    container.update(null, false)\n\n    if (existingContainer) {\n      container[$children] = existingContainer[$children]\n      realignContainerTree(container, true, true)\n    }\n\n    const stack = sources.slice()\n    for (let childElement of [ ...domElement.children ])\n      restoreChildElementSource(childElement, stack)\n\n    function storeChildSource (node) {\n      const data = mkdux(node)\n      sources.push(data.src || node.innerHTML)\n      for (let child of [ ...node.children ])\n        storeChildSource(child)\n    }\n\n    function restoreChildElementSource (node, stack) {\n      const parser = new Parser()\n      const source = stack.shift()\n      const data = extend(mkdux(node), {src: source})\n      const patch = source ? parser.createPatch(source) : null\n      if (patch) patch(node)\n      for (let child of [ ...node.children ])\n        restoreChildElementSource(child, stack)\n    }\n  }\n  return container\n}\n\n\n/**\n * Container class.\n *\n * @public\n * @class Container\n */\n\nexport class Container {\n\n  /**\n   * Container constructor.\n   *\n   * @public\n   * @constructor\n   * @param {Element|String} domElement\n   * @param {Function} ...reducers\n   */\n\n  constructor (domElement = null, ...reducers) {\n    // ensure DOM element instance\n    domElement = ensureDOMElement(domElement)\n\n    /**\n     * Container UID\n     *\n     * @private\n     * @type {String}\n     */\n\n    this[$uid] = createContainerUid()\n\n    /**\n     * Instance root DOM Element.\n     *\n     * @private\n     * @type {Element}\n     */\n\n    this[$domElement] = domElement\n\n    /**\n     * Middleware set.\n     *\n     * @private\n     * @type {Set}\n     */\n\n    this[$middleware] = new Set()\n\n    /**\n     * Known container pipes.\n     *\n     * @private\n     * @type {Set}\n     */\n\n    this[$pipes] = new Map()\n\n    /**\n     * View model.\n     *\n     * @private\n     * @type {Object}\n     */\n\n    this[$model] = {}\n\n    /**\n     * Child containers.\n     *\n     * @private\n     * @type {Set}\n     */\n\n    this[$children] = new Set()\n\n    /**\n     * Redux store.\n     *\n     * @private\n     * @type {Object}\n     */\n\n    this[$store] = createStore(combineReducers([\n      // The root reducer handles container state updates\n      // and propagates them to the internal DOM element\n      // via starplate templates. The DOM tree is patched,\n      // not redrawn. Middleware consumption is also applied\n      // here. The state and action objects provided by redux\n      // may be modified.\n      createRootReducer(this),\n\n      // User provided reducers from the class constructor. The\n      // state and action objects may be modified from their original\n      // states when dispatched due to middleware side effects applied\n      // in  the root reducer.\n      ...reducers,\n\n      // Piped reducers are applied when composition occurs between\n      // two containers. They are achievd with the pipe() method. All\n      // dispatched actions are propagated to the piped container via\n      // this reducer. They actually don't reduce state, but simply pass\n      // it on. When an update action occurs via an update() on a container\n      // all containers it has been piped to will effectively have their\n      // update() methods called with the provided data arguments. Please\n      // note that any middleware applied to parent of a pipe chain will\n      // affect the input of the child of a pipe chain.\n      createPipeReducer(this),\n    ]))\n\n    // Replace DOM element with itself effectively\n    // restoring orphaned or lost stardux data.\n    replaceDOMElement(this, domElement)\n\n    // ensure container state identifers found in\n    // DOM element source is predefined on the internal\n    // state object.\n    ensureContainerStateIdentifiers(this)\n\n    // Save this container to the internal container map\n    saveContainer(this)\n\n    // Realign parent tree recursively if it exists and restore\n    // orphaned child containers. This will cause all\n    // child containers to realign themselves recursively.\n    if (this.parent)\n      realignContainerTree(this.parent, true, true)\n    // Realign container and all orphaned child containers if\n    // found in the tree. This will cause child containers to\n    // realign themselves.\n    else\n      realignContainerTree(this, true, true)\n  }\n\n  /**\n   * Copy of the internal state object.\n   *\n   * @public\n   * @type {Object}\n   */\n\n  get state () {\n    return clone(this[$model])\n  }\n\n  /**\n   * Container id.\n   *\n   * @public\n   * @type {String}\n   */\n\n  get id () {\n    return this[$uid]\n  }\n\n  /**\n   * Getter to return parent container if\n   * available. Parent is determined with\n   * DOM traversal up the tree. A container can\n   * be considered orphaned if it doesn't have a\n   * parent DOM element.\n   *\n   * @public\n   * @type {Container|null}\n   */\n\n  get parent () {\n    const domElement = this.domElement\n    let parentElement = domElement && domElement.parentElement\n    let parentContainerData = {}\n    let parentElementContainer = null\n    do {\n      if (null == parentElement) break\n      parentContainerData = parentElement[STARDUX_PRIVATE_ATTR] || {}\n      parentElement = parentElement.parentElement\n    } while (!(parentElementContainer = fetchContainer(parentContainerData.id)))\n    return parentElementContainer\n  }\n\n  /**\n   * Getter to return container DOm element.\n   *\n   * @public\n   * @type {Element}\n   */\n\n  get domElement () {\n    return this[$domElement]\n  }\n\n  /**\n   * DOM element setter that basically just\n   * calls replaceDOMElement(domElement).\n   *\n   * @public\n   * @type {Element}\n   */\n\n  set domElement (domElement) {\n    if (domElement instanceof Element)\n      replaceDOMElement(this, domElement)\n    else throw new TypeError( \"Cannot set property .domElement. Value must \"\n                            + \"be an Element.\" )\n    return this.domElement\n  }\n\n  /**\n   * Returns inner contents of the container.\n   *\n   * @public\n   * @type {String}\n   */\n\n  get innerContents () {\n    return this.domElement.innerHTML || ''\n  }\n\n  /**\n   * Sets inner contents of DOM content.\n   * This will set the template source\n   * and update the container. If child\n   * containers exist in tree they will\n   * become orphaned. If value is null\n   * then the value becomes an empty\n   * string (''). undefined values result\n   * in the string 'undefined'.\n   *\n   * @public\n   * @type {String}\n   */\n\n  set innerContents (value) {\n    if (null === value)\n      value = ''\n    const data = mkdux(this)\n    data.src = String(value)\n    this.update()\n  }\n\n  /**\n   * Getter to return an array\n   * of child containers\n   *\n   * @public\n   * @return {Array<Container>}\n   */\n\n  get children () {\n    return [ ...this[$children].entries() ].map(kv => kv[0])\n  }\n\n  /**\n   * Extend view model.\n   *\n   * @example <caption>Extend current state model.</caption>\n   *   container.define({value: 0});\n   *\n   * @public\n   * @param {Object} model\n   * @return {Container}\n   */\n\n  define (model) {\n    if ('object' == typeof model)\n      extend(true, this[$model], model)\n    return this\n  }\n\n\n  /**\n   * Consume reducer middleware.\n   *\n   * @example <caption>Install reducer middleware plugin.</caption>\n   *   container.use((state = {}, action) => { ... });\n   *\n   * @public\n   * @param {...Function} plugins\n   * @return {Container}\n   */\n\n  use (...plugins) {\n    const middleware = this[$middleware]\n    for (let plugin of plugins)\n      middleware.add(plugin)\n    return this\n  }\n\n  /**\n   * Updates container and all child containers.\n   *\n   * @example <caption>Update container and its children</caption>\n   *   container.update({value: 0});\n   *\n   * @example <caption>Update only container and not its children</caption>\n   *   container.update({value: 0}, false);\n   *\n   * @public\n   * @param {Object} [data] - New state data\n   * @param {Boolean} [propagate] - Propagate updates to child containers.\n   * @return {Container}\n   */\n\n  update (data, propagate = true) {\n    const domElement = this.domElement\n    const template = getTemplateFromDomElement(domElement)\n\n    // init/update DOM data\n    extend(mkdux(domElement), { id: this[$uid] })\n    if (template) {\n      extend(mkdux(domElement), {\n        src: getTemplateFromDomElement(domElement)\n      })\n    }\n\n    // pre alignment\n    realignContainerTree(this, true, true)\n\n    // update\n    this.dispatch($UPDATE_ACTION, data, { propagate: propagate })\n\n    if (propagate) {\n      for (let child of [ ...this.children ]) {\n        child.update(data || this.state)\n      }\n    }\n\n    // post alignment\n    realignContainerTree(this)\n    return this\n  }\n\n  /**\n   * Render container to a DOM element.\n   *\n   * @example <caption>Render container to a given domElement.</caption>\n   *   container.render(document.body);\n   *\n   * @public\n   * @param {Element} domElement\n   * @return {Container}\n   */\n\n  render (domElement) {\n    if (!domElement) return this\n    if (false == domElement.contains(this[$domElement])) {\n      domElement.appendChild(this[$domElement])\n      realignContainerTree(this)\n    }\n    return this\n  }\n\n  /**\n   * Dispatch an event with type, optional data\n   * and optional arguments to the internal redux store.\n   *\n   * @example <caption>Dispatch an action with type and optional data and action argument.</caption>\n   *   container.dispatch({\n   *     type: 'MY_ACTION',\n   *     data: {value: 123},\n   *     propagate: false\n   *   });\n   *\n   * @public\n   * @param {Mixed} type\n   * @param {Object} [data]\n   * @param {Object} [args]\n   * @return {Container}\n   */\n\n  dispatch (type, data = {}, args = {}) {\n    if (!type) throw new TypeError(\"Failed to dispatch event without type.\")\n    const store = this[$store]\n    const payload = {type: type, data: data}\n    for (let key in args)\n      payload[key] = args[key]\n    store.dispatch(payload)\n    return this\n  }\n\n  /**\n   * Replace child tree with new children.\n   * @public\n   *\n   * @example\n   *  container.replaceChildren([childA, childB, createContainer()]);\n   *\n   * @param {Array<Container|Element>} children\n   * @return {Container}\n   */\n\n  replaceChildren (children) {\n    for (let child of this.children)\n      this.removeChild(child, false)\n\n    for (let child of children)\n      this.appendChild(child, false)\n    return this.update()\n  }\n\n  /**\n   * Returns the associated value of the\n   * container.\n   *\n   * @public\n   * @return {Element}\n   */\n\n  valueOf () {\n    return this.domElement\n  }\n\n  /**\n   * Returns the string reprenstation of\n   * this container.\n   *\n   * @public\n   * @return {String}\n   */\n\n  toString () {\n    return this.domElement.textContent\n  }\n\n  /**\n   * Converts container to a JSON\n   * serializable object.\n   *\n   * @public\n   * @return {Object}\n   */\n\n  toJSON () {\n    const root = {}\n    void function traverse (container, node) {\n      node.id = container.id\n      node.src = getTemplateFromDomElement(container.domElement)\n      node.state = container.state || {}\n      node.children = []\n      for (let child of container.children) {\n        const next = {}\n        node.children.push(next)\n        traverse(child, next)\n      }\n    }(this, root)\n    return root\n  }\n\n  /**\n   * Pipe container updates to a given container.\n   *\n   * @example\n   *  containerA.pipe(containerB);\n   *\n   * @public\n   * @param {Container} container\n   * @return {Container} container\n   */\n\n  pipe (container) {\n    const pipes = this[$pipes]\n    const middleware = (state, action) => {\n      switch (action.type) {\n        case $UPDATE_ACTION:\n          if (action.data) container.update(clone(action.data))\n          break\n        default:\n          container.dispatch(action.type, action.data, action)\n      }\n    }\n\n    if (false == pipes.has(container))\n      pipes.set(container, middleware)\n\n    return container\n  }\n\n  /**\n   * Unpipe container updates for a given container.\n   *\n   * @example\n   *  containerA.unpipe(containerB);\n   *\n   * @public\n   * @param {Container} container\n   * @return {Container} container\n   */\n\n  unpipe (container) {\n    const pipes = this[$pipes]\n    const reducers = this[$middleware]\n    const middleware = pipes.get(container)\n    if (middleware) {\n      pipes.delete(container)\n    }\n    return container\n  }\n\n  /**\n   * Append a child container. A child may be an\n   * instance of a Container, Element, Text, or\n   * a string. Containers are derived from their input\n   * and will cause a DOM tree to be restructured.\n   *\n   * @example\n   *   container.appendChild(child);\n   *\n   * @public\n   * @param {Container|Element|Text|String} child\n   * @param {Boolean} [update]\n   * @param {Boolean} [realign]\n   * @return {Container}\n   */\n\n  appendChild (child, update = true, realign = true) {\n    const domElement = this.domElement\n    let childDomElement = null\n    let container = null\n\n    if (child instanceof Container) {\n      container = child\n    } else if (child instanceof Element) {\n      container = createContainer(child)\n    } else if ('string' == typeof child || child instanceof Text) {\n      container = createContainer(child)\n    } else {\n      throw new TypeError( \"Unexpected input for appendChild. \"\n                         + \"Expecting an instance of a Container, Element, Text \"\n                         + \"or a string.\" )\n    }\n\n    childDomElement = container.domElement\n\n    if (update) this.update()\n\n    try {\n      if (container.parent && container.parent != this) {\n        container.parent.removeChild(container)\n      }\n      domElement.appendChild(childDomElement)\n      this[$children].add(container)\n    } catch (e) { console.warn(e) }\n\n    if (realign) realignContainerTree(this)\n\n    return container\n  }\n\n  /**\n   * Remove a child container. A child may be an\n   * instance of a Container or Element. Containers\n   * are derived from their input and will cause a\n   * DOM tree to be restructured.\n   *\n   * @example\n   *   container.removeChild(child);\n   *\n   * @public\n   * @param {Container|Element} child\n   * @param {Boolean} [update]\n   * @param {Boolean} [realign]\n   * @return {Container}\n   */\n\n  removeChild (child, update = true, realign = true) {\n    const domElement = this.domElement\n    let childDomElement = null\n    let container = fetchContainer(child)\n\n    // bail if there is nothing to do\n    if (null == container) return this\n\n    childDomElement = container.domElement\n\n    // remove child if it is in tree\n    if (domElement.contains(childDomElement))\n      domElement.removeChild(childDomElement)\n\n    // remove from container children tree\n    this[$children].delete(container)\n\n    // realign tree\n    if (realign) realignContainerTree(this)\n\n    return this\n  }\n\n  /**\n   * Predicate to determine if a container or its\n   * DOM element is a child of the container.\n   *\n   * @example\n   *   if (container.contains(child)) {\n   *     ...\n   *   }\n   *\n   * @public\n   * @param {Container|Element} container\n   * @param {Boolean} [recursive]\n   * @return {Boolean}\n   */\n\n  contains (container, recursive = true) {\n    container = fetchContainer(container)\n    if (this[$children].has(container)) {\n      return true\n    } else if (recursive) {\n      for (let child of this.children) {\n        if (child.contains(container)) {\n          return true\n        }\n      }\n    }\n    return false\n  }\n}\n"
  },
  {
    "__docId__": 1,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "$domElement",
    "memberof": "src/index.js",
    "longname": "src/index.js~$domElement",
    "access": "private",
    "export": false,
    "importPath": "stardux/src/index.js",
    "importStyle": null,
    "description": "Container symbols.",
    "lineNumber": 21,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 2,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "$middleware",
    "memberof": "src/index.js",
    "longname": "src/index.js~$middleware",
    "access": null,
    "export": false,
    "importPath": "stardux/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 22,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "$children",
    "memberof": "src/index.js",
    "longname": "src/index.js~$children",
    "access": null,
    "export": false,
    "importPath": "stardux/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "$pipes",
    "memberof": "src/index.js",
    "longname": "src/index.js~$pipes",
    "access": null,
    "export": false,
    "importPath": "stardux/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 24,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 5,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "$model",
    "memberof": "src/index.js",
    "longname": "src/index.js~$model",
    "access": null,
    "export": false,
    "importPath": "stardux/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 25,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 6,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "$store",
    "memberof": "src/index.js",
    "longname": "src/index.js~$store",
    "access": null,
    "export": false,
    "importPath": "stardux/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 26,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 7,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "$uid",
    "memberof": "src/index.js",
    "longname": "src/index.js~$uid",
    "access": null,
    "export": false,
    "importPath": "stardux/src/index.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 27,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 8,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "STARDUX_PRIVATE_ATTR",
    "memberof": "src/index.js",
    "longname": "src/index.js~STARDUX_PRIVATE_ATTR",
    "access": "private",
    "export": false,
    "importPath": "stardux/src/index.js",
    "importStyle": null,
    "description": "Private stardux data attached to\ntraversed DOM elements.",
    "lineNumber": 38,
    "unknown": [
      {
        "tagName": "@const",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 9,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "$UPDATE_ACTION",
    "memberof": "src/index.js",
    "longname": "src/index.js~$UPDATE_ACTION",
    "access": "private",
    "export": false,
    "importPath": "stardux/src/index.js",
    "importStyle": null,
    "description": "Reducer action type symbols.",
    "lineNumber": 48,
    "unknown": [
      {
        "tagName": "@const",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 10,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "CONTAINERS",
    "memberof": "src/index.js",
    "longname": "src/index.js~CONTAINERS",
    "access": "private",
    "export": false,
    "importPath": "stardux/src/index.js",
    "importStyle": null,
    "description": "Known container map by ID",
    "lineNumber": 57,
    "type": {
      "nullable": null,
      "types": [
        "Map"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 11,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "clone",
    "memberof": "src/index.js",
    "longname": "src/index.js~clone",
    "access": "private",
    "export": false,
    "importPath": "stardux/src/index.js",
    "importStyle": null,
    "description": "Clones an object.",
    "lineNumber": 67,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "object",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 12,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "isArrayLike",
    "memberof": "src/index.js",
    "longname": "src/index.js~isArrayLike",
    "access": "private",
    "export": false,
    "importPath": "stardux/src/index.js",
    "importStyle": null,
    "description": "Detects if input is \"like\" an array.",
    "lineNumber": 79,
    "params": [
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "a",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 13,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "mkdux",
    "memberof": "src/index.js",
    "longname": "src/index.js~mkdux",
    "access": "private",
    "export": false,
    "importPath": "stardux/src/index.js",
    "importStyle": null,
    "description": "Make stardux data object on a\nnode if not already there.",
    "lineNumber": 100,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "data",
        "description": "= {}]"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 14,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "rmdux",
    "memberof": "src/index.js",
    "longname": "src/index.js~rmdux",
    "access": "private",
    "export": false,
    "importPath": "stardux/src/index.js",
    "importStyle": null,
    "description": "Remove stardux data object.",
    "lineNumber": 114,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "node",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 15,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getTokens",
    "memberof": "src/index.js",
    "longname": "src/index.js~getTokens",
    "access": "private",
    "export": false,
    "importPath": "stardux/src/index.js",
    "importStyle": null,
    "description": "Returns an array of known tokens\nin a javascript string.",
    "lineNumber": 130,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "string",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Array"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 16,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getIdentifiersFromTokens",
    "memberof": "src/index.js",
    "longname": "src/index.js~getIdentifiersFromTokens",
    "access": "private",
    "export": false,
    "importPath": "stardux/src/index.js",
    "importStyle": null,
    "description": "Returns an object of identifiers with\nempty string or NO-OP function\nvalues.",
    "lineNumber": 147,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array"
        ],
        "spread": false,
        "optional": false,
        "name": "tokens",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 17,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ensureDOMString",
    "memberof": "src/index.js",
    "longname": "src/index.js~ensureDOMString",
    "access": "private",
    "export": false,
    "importPath": "stardux/src/index.js",
    "importStyle": null,
    "description": "Ensures a DOM string from a given input.",
    "lineNumber": 234,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "html",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 18,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ensureDOMElement",
    "memberof": "src/index.js",
    "longname": "src/index.js~ensureDOMElement",
    "access": "private",
    "export": false,
    "importPath": "stardux/src/index.js",
    "importStyle": null,
    "description": "Ensure DOM element.",
    "lineNumber": 247,
    "params": [
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "input",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 19,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getTemplateFromDomElement",
    "memberof": "src/index.js",
    "longname": "src/index.js~getTemplateFromDomElement",
    "access": "public",
    "export": false,
    "importPath": "stardux/src/index.js",
    "importStyle": null,
    "description": "Returns a template tring from a given\nDOM Element. If the DOM Element given is a\nstring then it is simply returned.",
    "lineNumber": 272,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "domElement",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 20,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "ensureContainerStateIdentifiers",
    "memberof": "src/index.js",
    "longname": "src/index.js~ensureContainerStateIdentifiers",
    "access": "private",
    "export": false,
    "importPath": "stardux/src/index.js",
    "importStyle": null,
    "description": "Ensures container state identifiers (tokens) derived from\nthe DOM element source are defined on the state if not\nalready. This is useful to prevent reference errors from\nbeing thrown when ES6 templates are evaulated in starplate's\nVM.",
    "lineNumber": 307,
    "params": [
      {
        "nullable": null,
        "types": [
          "Container"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "identifiers"
    },
    "generator": false
  },
  {
    "__docId__": 21,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "createRootReducer",
    "memberof": "src/index.js",
    "longname": "src/index.js~createRootReducer",
    "access": "private",
    "export": false,
    "importPath": "stardux/src/index.js",
    "importStyle": null,
    "description": "Creates a root reducer for a Container\ninstance.",
    "lineNumber": 334,
    "params": [
      {
        "nullable": null,
        "types": [
          "Container"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 22,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "createPipeReducer",
    "memberof": "src/index.js",
    "longname": "src/index.js~createPipeReducer",
    "access": "private",
    "export": false,
    "importPath": "stardux/src/index.js",
    "importStyle": null,
    "description": "Creates a pipe reducer for a Container\ninstance.",
    "lineNumber": 388,
    "params": [
      {
        "nullable": null,
        "types": [
          "Container"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Function"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 23,
    "kind": "variable",
    "static": true,
    "variation": null,
    "name": "UPDATE",
    "memberof": "src/index.js",
    "longname": "src/index.js~UPDATE",
    "access": "public",
    "export": true,
    "importPath": "stardux/src/index.js",
    "importStyle": "{UPDATE}",
    "description": "The action type dispatched by the update() method.",
    "examples": [
      "<caption>Handle update actions in middleware and reducers.</caption>\n\n  // Use this value to determine what type of\n  // action was dispatched in a reducer or\n  // middleware function\n  (state, action) => {\n    if (UPDATE == action.type) {\n       // reducer/middleware logic here\n    }\n  }"
    ],
    "lineNumber": 433,
    "unknown": [
      {
        "tagName": "@const",
        "tagValue": ""
      }
    ],
    "type": {
      "nullable": null,
      "types": [
        "Symbol"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 24,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "createContainer",
    "memberof": "src/index.js",
    "longname": "src/index.js~createContainer",
    "access": "public",
    "export": true,
    "importPath": "stardux/src/index.js",
    "importStyle": "{createContainer}",
    "description": "Create a new Container instance with optional\ninitial state and n reducers.",
    "examples": [
      "<caption>Create an anonymouse container.</caption>\n  const container = createContainer();",
      "<caption>Create a container for a DOM Element.</caption>\n  const container = createContainer(domElement);",
      "<caption>Create a container for a DOM Element with initial state.</caption>\n  const container = createContainer(domElement, {value: 0});",
      "<caption>Create a container for a DOM Element with initial state and reducers.</caption>\n  const container = createContainer(domElement, {value: 0}, (state = {}, action) => {\n    if (UPATE == action.type) {\n       return {\n         value: state.action + action.data.value\n       }\n    }\n  });"
    ],
    "lineNumber": 464,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "domElement",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "initialState",
        "description": "Initial state object"
      },
      {
        "nullable": null,
        "types": [
          "...Function"
        ],
        "spread": true,
        "optional": true,
        "name": "reducers",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Container"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 25,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "makeContainer",
    "memberof": "src/index.js",
    "longname": "src/index.js~makeContainer",
    "access": "public",
    "export": true,
    "importPath": "stardux/src/index.js",
    "importStyle": "{makeContainer}",
    "description": "Creates a or returns a new Container instance\nfrom a given DOM element.\n\nIf a DOM element is already associated with\na container then the container is just\nreturned, otherwise a new one is created.",
    "examples": [
      "<caption>Make a container for a DOM Element.</caption>\n  const container = makeContainer(document.body);"
    ],
    "lineNumber": 486,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "domElement",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Container"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 26,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "restoreContainerFromJSON",
    "memberof": "src/index.js",
    "longname": "src/index.js~restoreContainerFromJSON",
    "access": "public",
    "export": true,
    "importPath": "stardux/src/index.js",
    "importStyle": "{restoreContainerFromJSON}",
    "description": "Create or restore a Container instance\nfrom a JSON object with an optional state\nobject a reducers.\n\nContainers are created if they do not already\nexist internally.",
    "examples": [
      "<caption>Restore or create a container from JSON.</caption>\n  const container = restoreContainerFromJSON(json);",
      "<caption>Restore or create a container from JSON with initial state.</caption>\n  const container = restoreContainerFromJSON(json, {value: 0});",
      "<caption>Restore or create a container from JSON with initial state and reducers.</caption>\n  const container = restoreContainerFromJSON(json, {value: 0}, ...reducers);"
    ],
    "lineNumber": 518,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "json",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "initialState",
        "description": "Initial state object"
      },
      {
        "nullable": null,
        "types": [
          "...Function"
        ],
        "spread": true,
        "optional": true,
        "name": "reducers",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Container"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 27,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "composeContainers",
    "memberof": "src/index.js",
    "longname": "src/index.js~composeContainers",
    "access": "public",
    "export": true,
    "importPath": "stardux/src/index.js",
    "importStyle": "{composeContainers}",
    "description": "Compose a container from containers or DOM elements.\nIf a Container or Element is given as first argument then\nit is treated as the root and all subsequent arguments are\ntreated as direct descendants of the root. If the second\nargument is an array or an \"array like\" object then it is\ntreated as direct descendants of the root and all subsequent\narguments are ignored. If an array or \"array like\" object is\npassed as the first argument a new root container is created\nand the first argument is treated as direct descendants of\nthe newly created root container. The root container, newly\ncreated or restored is returned.",
    "examples": [
      "<caption>Compose containers together with new root.</caption>\n  const a = createContainer();\n  const b = createContainer();\n  const composed = composeContainers([a, b]);",
      "<caption>Compose containers together with given root.</caption>\n  const a = createContainer();\n  const b = createContainer();\n  const c = createContainer();\n  const composed = composeContainers(a, [b, c]);"
    ],
    "lineNumber": 583,
    "params": [
      {
        "nullable": true,
        "types": [
          "Element",
          "Container"
        ],
        "spread": false,
        "optional": false,
        "name": "root",
        "description": ""
      },
      {
        "nullable": true,
        "types": [
          "...Element",
          "Container",
          "String"
        ],
        "spread": true,
        "optional": false,
        "name": "containers",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Container"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 28,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getContainerData",
    "memberof": "src/index.js",
    "longname": "src/index.js~getContainerData",
    "access": "public",
    "export": true,
    "importPath": "stardux/src/index.js",
    "importStyle": "{getContainerData}",
    "description": "Returns immutable private stardux data for a given\ninput. Input can be a container, an Element,\nor a string representing a container ID. If data is\nnot found then null is returned.",
    "examples": [
      "<caption>Get container data for a container.</caption>\n  const data = getContainerData(container);",
      "<caption>Get container data for a container from a given DOM element.</caption>\n  const data = getContainerData(container);",
      "<caption>Get container data for a container from a given id.</caption>\n  const data = getContainerData(id);"
    ],
    "lineNumber": 644,
    "params": [
      {
        "nullable": null,
        "types": [
          "Container",
          "Element",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 29,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "restoreOrphanedTree",
    "memberof": "src/index.js",
    "longname": "src/index.js~restoreOrphanedTree",
    "access": "public",
    "export": true,
    "importPath": "stardux/src/index.js",
    "importStyle": "{restoreOrphanedTree}",
    "description": "Restores orphaned children containers\nstill attached to a container. An orphan\ncontainer is a container who belongs to\na set of containers and it's DOM element\nis not attched to a DOM tree (The parent\ncontainer's DOM element).",
    "lineNumber": 673,
    "params": [
      {
        "nullable": null,
        "types": [
          "Container",
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "recursive",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 30,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "realignContainerTree",
    "memberof": "src/index.js",
    "longname": "src/index.js~realignContainerTree",
    "access": "public",
    "export": true,
    "importPath": "stardux/src/index.js",
    "importStyle": "{realignContainerTree}",
    "description": "Realign container DOM tree by removing containers\nnot found in container DOM tree. If recursive is set to\ntrue then realignment is applied to all subsequent child\ncontainers. If forceOrphanRestoration is set to true then\norphan containers are restored.",
    "lineNumber": 707,
    "params": [
      {
        "nullable": null,
        "types": [
          "Container"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "recursive",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "forceOrphanRestoration",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 31,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "saveContainer",
    "memberof": "src/index.js",
    "longname": "src/index.js~saveContainer",
    "access": "public",
    "export": true,
    "importPath": "stardux/src/index.js",
    "importStyle": "{saveContainer}",
    "description": "Save a container to the known containers map. A\nDOM element may be passed if it has been claimed by\na Container instance.",
    "examples": [
      "<caption>Save a container</caption>\n  saveContainer(container);",
      "<caption>Save a container by DOM element</caption>\n  saveContainer(domElement);"
    ],
    "lineNumber": 765,
    "params": [
      {
        "nullable": null,
        "types": [
          "Container",
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 32,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "fetchContainer",
    "memberof": "src/index.js",
    "longname": "src/index.js~fetchContainer",
    "access": "public",
    "export": true,
    "importPath": "stardux/src/index.js",
    "importStyle": "{fetchContainer}",
    "description": "Fetch a saved container by container ID,\nDOM element, or by a container instance.",
    "examples": [
      "<caption>Fetch container by id.</caption>\n  const container = fetchContainer(id);",
      "<caption>Fetch container by DOM element.</caption>\n  const container = fetchContainer(domElement);",
      "<caption>Fetch container by object with id.</caption>\n  const container = fetchContainer({id: id});"
    ],
    "lineNumber": 793,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Element",
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": true,
        "name": "arg.id",
        "description": "Container ID"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "class Container"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 33,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "createContainerUid",
    "memberof": "src/index.js",
    "longname": "src/index.js~createContainerUid",
    "access": "public",
    "export": true,
    "importPath": "stardux/src/index.js",
    "importStyle": "{createContainerUid}",
    "description": "Generates a unique hex ID for Container instances.",
    "examples": [
      "<caption>Create a unique container ID</caption>\n  const id = createContainerUid();"
    ],
    "lineNumber": 812,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 34,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "getAllContainers",
    "memberof": "src/index.js",
    "longname": "src/index.js~getAllContainers",
    "access": "public",
    "export": true,
    "importPath": "stardux/src/index.js",
    "importStyle": "{getAllContainers}",
    "description": "Returns an interator for all containers.",
    "examples": [
      "<caption>Get an iterator for all containers.</caption>\n  const it = getAllContainers();\n  for (let pair of [ ...it ])\n    console.log(pair);"
    ],
    "lineNumber": 828,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Array<MapIterator>"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 35,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "forEachContainer",
    "memberof": "src/index.js",
    "longname": "src/index.js~forEachContainer",
    "access": "public",
    "export": true,
    "importPath": "stardux/src/index.js",
    "importStyle": "{forEachContainer}",
    "description": "Execute a function for each container.",
    "examples": [
      "  forEachContainer(container => {\n    console.log(container);\n  });"
    ],
    "lineNumber": 845,
    "params": [
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "scope",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 36,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "traverseContainer",
    "memberof": "src/index.js",
    "longname": "src/index.js~traverseContainer",
    "access": "public",
    "export": true,
    "importPath": "stardux/src/index.js",
    "importStyle": "{traverseContainer}",
    "description": "Traverse a container's tree recursively.",
    "examples": [
      "  traverseContainer(container, child => {\n    console.log(child);\n  });"
    ],
    "lineNumber": 866,
    "params": [
      {
        "nullable": null,
        "types": [
          "Container"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "fn",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "scope",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 37,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "removeContainer",
    "memberof": "src/index.js",
    "longname": "src/index.js~removeContainer",
    "access": "public",
    "export": true,
    "importPath": "stardux/src/index.js",
    "importStyle": "{removeContainer}",
    "description": "Removes a container from the internal tree.\nThe container is also removed from its parent\nif it is attched to one. A string ID, DOM element,\nor Container may be used as an argument.",
    "examples": [
      "<caption>Remove container by id.</caption>\n  removeContainer(id);",
      "<caption>Remove container by DOM element.</caption>\n  removeContainer(domElement);",
      "<caption>Remove container by object with id.</caption>\n  removeContainer({id: id});"
    ],
    "lineNumber": 894,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Container",
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "arg",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 38,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "replaceContainer",
    "memberof": "src/index.js",
    "longname": "src/index.js~replaceContainer",
    "access": "public",
    "export": true,
    "importPath": "stardux/src/index.js",
    "importStyle": "{replaceContainer}",
    "description": "Replace a container with another. Arguments may be\na container ID, Container instance, or DOM elements\nclaimed by a Container instance. If create is set to true\nthen the replacement container is created if it does not\nalready exist. The function will throw an Error if the\nexisting input container does not exist or is not a Container.",
    "examples": [
      "<caption>Replace container by container.</caption>\n  replaceContainer(existingContainer, replaceContainer);",
      "<caption>Replace container by ids.</caption>\n  replaceContainer(existingId, replacementId);",
      "<caption>Replace container by DOM elements.</caption>\n  replaceContainer(existingDomElement, replacementDomElement);",
      "<caption>Replace container by object with id.</caption>\n  replaceContainer({id: existingId}, {id: replacementId});"
    ],
    "lineNumber": 939,
    "params": [
      {
        "nullable": null,
        "types": [
          "String",
          "Container",
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "existing",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "String",
          "Container",
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "replacement",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolen"
        ],
        "spread": false,
        "optional": true,
        "name": "create",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Container"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 39,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "clearContainers",
    "memberof": "src/index.js",
    "longname": "src/index.js~clearContainers",
    "access": "public",
    "export": true,
    "importPath": "stardux/src/index.js",
    "importStyle": "{clearContainers}",
    "description": "Clears all saved containers. This will call\nremoveContainer for every saved container.",
    "lineNumber": 985,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "undefined"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 40,
    "kind": "function",
    "static": true,
    "variation": null,
    "name": "replaceDOMElement",
    "memberof": "src/index.js",
    "longname": "src/index.js~replaceDOMElement",
    "access": "public",
    "export": true,
    "importPath": "stardux/src/index.js",
    "importStyle": "{replaceDOMElement}",
    "description": "Replace container element with another. This will remove all\nchildren containers and realign the container tree.",
    "lineNumber": 1003,
    "params": [
      {
        "nullable": null,
        "types": [
          "Container"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "domElement",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Container"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 41,
    "kind": "class",
    "static": true,
    "variation": null,
    "name": "Container",
    "memberof": "src/index.js",
    "longname": "src/index.js~Container",
    "access": "public",
    "export": true,
    "importPath": "stardux/src/index.js",
    "importStyle": "{Container}",
    "description": "Container class.",
    "lineNumber": 1060,
    "unknown": [
      {
        "tagName": "@class",
        "tagValue": "Container"
      }
    ],
    "interface": false
  },
  {
    "__docId__": 42,
    "kind": "constructor",
    "static": false,
    "variation": null,
    "name": "constructor",
    "memberof": "src/index.js~Container",
    "longname": "src/index.js~Container#constructor",
    "access": "public",
    "description": "Container constructor.",
    "lineNumber": 1071,
    "unknown": [
      {
        "tagName": "@constructor",
        "tagValue": ""
      }
    ],
    "params": [
      {
        "nullable": null,
        "types": [
          "Element",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "domElement",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Function"
        ],
        "spread": false,
        "optional": false,
        "name": "...reducers",
        "description": ""
      }
    ],
    "generator": false
  },
  {
    "__docId__": 43,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "state",
    "memberof": "src/index.js~Container",
    "longname": "src/index.js~Container#state",
    "access": "public",
    "description": "Copy of the internal state object.",
    "lineNumber": 1194,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "__docId__": 44,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "id",
    "memberof": "src/index.js~Container",
    "longname": "src/index.js~Container#id",
    "access": "public",
    "description": "Container id.",
    "lineNumber": 1205,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "__docId__": 45,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "parent",
    "memberof": "src/index.js~Container",
    "longname": "src/index.js~Container#parent",
    "access": "public",
    "description": "Getter to return parent container if\navailable. Parent is determined with\nDOM traversal up the tree. A container can\nbe considered orphaned if it doesn't have a\nparent DOM element.",
    "lineNumber": 1220,
    "type": {
      "nullable": null,
      "types": [
        "Container",
        "null"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "__docId__": 46,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "domElement",
    "memberof": "src/index.js~Container",
    "longname": "src/index.js~Container#domElement",
    "access": "public",
    "description": "Getter to return container DOm element.",
    "lineNumber": 1240,
    "type": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "__docId__": 47,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "domElement",
    "memberof": "src/index.js~Container",
    "longname": "src/index.js~Container#domElement",
    "access": "public",
    "description": "DOM element setter that basically just\ncalls replaceDOMElement(domElement).",
    "lineNumber": 1252,
    "type": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "__docId__": 48,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "innerContents",
    "memberof": "src/index.js~Container",
    "longname": "src/index.js~Container#innerContents",
    "access": "public",
    "description": "Returns inner contents of the container.",
    "lineNumber": 1267,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "__docId__": 49,
    "kind": "set",
    "static": false,
    "variation": null,
    "name": "innerContents",
    "memberof": "src/index.js~Container",
    "longname": "src/index.js~Container#innerContents",
    "access": "public",
    "description": "Sets inner contents of DOM content.\nThis will set the template source\nand update the container. If child\ncontainers exist in tree they will\nbecome orphaned. If value is null\nthen the value becomes an empty\nstring (''). undefined values result\nin the string 'undefined'.",
    "lineNumber": 1285,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    },
    "generator": false
  },
  {
    "__docId__": 50,
    "kind": "get",
    "static": false,
    "variation": null,
    "name": "children",
    "memberof": "src/index.js~Container",
    "longname": "src/index.js~Container#children",
    "access": "public",
    "description": "Getter to return an array\nof child containers",
    "lineNumber": 1301,
    "return": {
      "nullable": null,
      "types": [
        "Array<Container>"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    },
    "generator": false
  },
  {
    "__docId__": 51,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "define",
    "memberof": "src/index.js~Container",
    "longname": "src/index.js~Container#define",
    "access": "public",
    "description": "Extend view model.",
    "examples": [
      "<caption>Extend current state model.</caption>\n  container.define({value: 0});"
    ],
    "lineNumber": 1316,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "model",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Container"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 52,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "use",
    "memberof": "src/index.js~Container",
    "longname": "src/index.js~Container#use",
    "access": "public",
    "description": "Consume reducer middleware.",
    "examples": [
      "<caption>Install reducer middleware plugin.</caption>\n  container.use((state = {}, action) => { ... });"
    ],
    "lineNumber": 1334,
    "params": [
      {
        "nullable": null,
        "types": [
          "...Function"
        ],
        "spread": true,
        "optional": false,
        "name": "plugins",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Container"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 53,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "update",
    "memberof": "src/index.js~Container",
    "longname": "src/index.js~Container#update",
    "access": "public",
    "description": "Updates container and all child containers.",
    "examples": [
      "<caption>Update container and its children</caption>\n  container.update({value: 0});",
      "<caption>Update only container and not its children</caption>\n  container.update({value: 0}, false);"
    ],
    "lineNumber": 1356,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "data",
        "description": "New state data"
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "propagate",
        "description": "Propagate updates to child containers."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Container"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 54,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "render",
    "memberof": "src/index.js~Container",
    "longname": "src/index.js~Container#render",
    "access": "public",
    "description": "Render container to a DOM element.",
    "examples": [
      "<caption>Render container to a given domElement.</caption>\n  container.render(document.body);"
    ],
    "lineNumber": 1396,
    "params": [
      {
        "nullable": null,
        "types": [
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "domElement",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Container"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 55,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "dispatch",
    "memberof": "src/index.js~Container",
    "longname": "src/index.js~Container#dispatch",
    "access": "public",
    "description": "Dispatch an event with type, optional data\nand optional arguments to the internal redux store.",
    "examples": [
      "<caption>Dispatch an action with type and optional data and action argument.</caption>\n  container.dispatch({\n    type: 'MY_ACTION',\n    data: {value: 123},\n    propagate: false\n  });"
    ],
    "lineNumber": 1423,
    "params": [
      {
        "nullable": null,
        "types": [
          "Mixed"
        ],
        "spread": false,
        "optional": false,
        "name": "type",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "data",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "name": "args",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Container"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 56,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "replaceChildren",
    "memberof": "src/index.js~Container",
    "longname": "src/index.js~Container#replaceChildren",
    "access": "public",
    "description": "Replace child tree with new children.",
    "examples": [
      " container.replaceChildren([childA, childB, createContainer()]);"
    ],
    "lineNumber": 1444,
    "params": [
      {
        "nullable": null,
        "types": [
          "Array<Container",
          "Element>"
        ],
        "spread": false,
        "optional": false,
        "name": "children",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Container"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 57,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "valueOf",
    "memberof": "src/index.js~Container",
    "longname": "src/index.js~Container#valueOf",
    "access": "public",
    "description": "Returns the associated value of the\ncontainer.",
    "lineNumber": 1461,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Element"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 58,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toString",
    "memberof": "src/index.js~Container",
    "longname": "src/index.js~Container#toString",
    "access": "public",
    "description": "Returns the string reprenstation of\nthis container.",
    "lineNumber": 1473,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 59,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "toJSON",
    "memberof": "src/index.js~Container",
    "longname": "src/index.js~Container#toJSON",
    "access": "public",
    "description": "Converts container to a JSON\nserializable object.",
    "lineNumber": 1485,
    "params": [],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 60,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "pipe",
    "memberof": "src/index.js~Container",
    "longname": "src/index.js~Container#pipe",
    "access": "public",
    "description": "Pipe container updates to a given container.",
    "examples": [
      " containerA.pipe(containerB);"
    ],
    "lineNumber": 1512,
    "params": [
      {
        "nullable": null,
        "types": [
          "Container"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Container"
      ],
      "spread": false,
      "description": "container"
    },
    "generator": false
  },
  {
    "__docId__": 61,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "unpipe",
    "memberof": "src/index.js~Container",
    "longname": "src/index.js~Container#unpipe",
    "access": "public",
    "description": "Unpipe container updates for a given container.",
    "examples": [
      " containerA.unpipe(containerB);"
    ],
    "lineNumber": 1541,
    "params": [
      {
        "nullable": null,
        "types": [
          "Container"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Container"
      ],
      "spread": false,
      "description": "container"
    },
    "generator": false
  },
  {
    "__docId__": 62,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "appendChild",
    "memberof": "src/index.js~Container",
    "longname": "src/index.js~Container#appendChild",
    "access": "public",
    "description": "Append a child container. A child may be an\ninstance of a Container, Element, Text, or\na string. Containers are derived from their input\nand will cause a DOM tree to be restructured.",
    "examples": [
      "  container.appendChild(child);"
    ],
    "lineNumber": 1567,
    "params": [
      {
        "nullable": null,
        "types": [
          "Container",
          "Element",
          "Text",
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "update",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "realign",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Container"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 63,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "removeChild",
    "memberof": "src/index.js~Container",
    "longname": "src/index.js~Container#removeChild",
    "access": "public",
    "description": "Remove a child container. A child may be an\ninstance of a Container or Element. Containers\nare derived from their input and will cause a\nDOM tree to be restructured.",
    "examples": [
      "  container.removeChild(child);"
    ],
    "lineNumber": 1617,
    "params": [
      {
        "nullable": null,
        "types": [
          "Container",
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "update",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "realign",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Container"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 64,
    "kind": "method",
    "static": false,
    "variation": null,
    "name": "contains",
    "memberof": "src/index.js~Container",
    "longname": "src/index.js~Container#contains",
    "access": "public",
    "description": "Predicate to determine if a container or its\nDOM element is a child of the container.",
    "examples": [
      "  if (container.contains(child)) {\n    ...\n  }"
    ],
    "lineNumber": 1655,
    "params": [
      {
        "nullable": null,
        "types": [
          "Container",
          "Element"
        ],
        "spread": false,
        "optional": false,
        "name": "container",
        "description": ""
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "name": "recursive",
        "description": ""
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": ""
    },
    "generator": false
  },
  {
    "__docId__": 66,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Infinity",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 67,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~NaN",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 68,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~undefined",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 69,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~null",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 70,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Object",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 71,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~object",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 72,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Function",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 73,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~function",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 74,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Boolean",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 75,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~boolean",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 76,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Symbol",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 77,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Error",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 78,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~EvalError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 79,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~InternalError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 80,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RangeError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 81,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ReferenceError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 82,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~SyntaxError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 83,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~TypeError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 84,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~URIError",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 85,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Number",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 86,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~number",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 87,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Date",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 88,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~String",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 89,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~string",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 90,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~RegExp",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 91,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 92,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int8Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 93,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 94,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint8ClampedArray",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 95,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int16Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 96,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint16Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 97,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Int32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 98,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Uint32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 99,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float32Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 100,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Float64Array",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 101,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Map",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 102,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Set",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 103,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakMap",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 104,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~WeakSet",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 105,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~ArrayBuffer",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 106,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~DataView",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 107,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~JSON",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 108,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Promise",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 109,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Generator",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 110,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~GeneratorFunction",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 111,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Reflect",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 112,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "BuiltinExternal/ECMAScriptExternal.js",
    "longname": "BuiltinExternal/ECMAScriptExternal.js~Proxy",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 114,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "CanvasRenderingContext2D",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~CanvasRenderingContext2D",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 115,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "DocumentFragment",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/DocumentFragment",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~DocumentFragment",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 116,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Element",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Element",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Element",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 117,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Event",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Event",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Event",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 118,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "Node",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/Node",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~Node",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 119,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "NodeList",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/API/NodeList",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~NodeList",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 120,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "XMLHttpRequest",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~XMLHttpRequest",
    "access": null,
    "description": null,
    "builtinExternal": true
  },
  {
    "__docId__": 121,
    "kind": "external",
    "static": true,
    "variation": null,
    "name": "AudioContext",
    "externalLink": "https://developer.mozilla.org/en/docs/Web/API/AudioContext",
    "memberof": "BuiltinExternal/WebAPIExternal.js",
    "longname": "BuiltinExternal/WebAPIExternal.js~AudioContext",
    "access": null,
    "description": null,
    "builtinExternal": true
  }
]